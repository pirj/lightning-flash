name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on: # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

defaults:
  run:
    shell: bash

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # max-parallel: 6
      matrix:
        # PyTorch 1.5 is failing on Win and bolts requires torchvision>=0.5
        os: [ubuntu-20.04, macOS-12, windows-2022]
        python-version: [3.7, 3.9]
        requires: ['oldest', 'latest']
        topic: [['core']]
        release: [ 'stable' ]
        exclude:
          # Skip if torch<1.8 and py3.9 on Linux: https://github.com/pytorch/pytorch/issues/50014
          - { os: ubuntu-20.04, python-version: 3.9, requires: 'oldest' }
          - { os: ubuntu-20.04, python-version: 3.9, requires: 'latest' }
        include:
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'pre', topic: [ 'core' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'image' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'image','image_vissl' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'image','image_baal' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'video' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'tabular' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'text' ] }
          - { os: 'ubuntu-20.04', python-version: 3.8, requires: 'latest', release: 'stable', topic: [ 'pointcloud' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'serve' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'graph' ] }
          - { os: 'ubuntu-20.04', python-version: 3.9, requires: 'latest', release: 'stable', topic: [ 'audio' ] }

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set Swap Space
      if: runner.os == 'Linux'
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

    - name: Install graphviz
      if: contains( matrix.topic , 'serve' )
      run: sudo apt-get install graphviz

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        fname = 'requirements.txt'
        ignore = ['pandas', 'torchmetrics']
        lines = [line if any([line.startswith(package) for package in ignore]) else line.replace('>=', '==') for line in open(fname).readlines()]
        open(fname, 'w').writelines(lines)
      shell: python

    - run: echo "period=$(python -c 'import time; days = time.time() / 60 / 60 / 24; print(int(days / 7))' 2>&1)" >> $GITHUB_OUTPUT
      if: matrix.requires == 'latest'
      id: times

    - name: Get pip cache dir
      id: pip-cache
      run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-td${{ steps.times.outputs.period }}-${{ join(matrix.topic,'-') }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-td${{ steps.times.outputs.period }}-${{ join(matrix.topic,'-') }}-${{ matrix.requires }}-pip-

# TODO
#    - name: Install graph test dependencies
#      if: contains( matrix.topic , 'graph' )
#      run: |
#        pip install torch==1.11.0+cpu torchvision==0.12.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
#        pip install torch-scatter -f https://data.pyg.org/whl/torch-1.11.0+cpu.html
#        pip install torch-sparse -f https://data.pyg.org/whl/torch-1.11.0+cpu.html
#        pip install torch-cluster -f https://data.pyg.org/whl/torch-1.11.0+cpu.html

    - name: Install dependencies
      run: |
        pip --version
        flag=$(python -c "print('--pre' if '${{matrix.release}}' == 'pre' else '')" 2>&1)
        pip install '.[${{ join(matrix.topic, ',') }},test]' \
          -r requirements/testing_${{ matrix.topic[0] }}.txt \
          --upgrade $flag \
          --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip list

# TODO
#    - name: Install vissl
#      if: contains( matrix.topic , 'image_extras' )
#      run: |
#        pip install git+https://github.com/facebookresearch/ClassyVision.git
#        pip install git+https://github.com/facebookresearch/vissl.git

# TODO
#    - name: Install serve test dependencies
#      if: contains( matrix.topic , 'serve' )
#      run: |
#        sudo apt-get install libsndfile1
#        # TODO
#        # pip install '.[all,audio]' icevision sahi==0.8.19 effdet --upgrade

# TODO
#    - name: Install audio test dependencies
#      if: contains( matrix.topic , 'audio' )
#      run: |
#        sudo apt-get install libsndfile1
#        pip install matplotlib
#        pip install '.[audio,image]' torch==1.11.0 --upgrade

    - name: Cache datasets
      uses: actions/cache@v3
      with:
        path: data # This path is specific to Ubuntu
        key: flash-datasets-${{ hashFiles('tests/examples/test_scripts.py') }}
        restore-keys: flash-datasets-

    - name: Tests
      env:
        FLASH_TEST_TOPIC: ${{ join(matrix.topic,',') }}
        FIFTYONE_DO_NOT_TRACK: true
      run: |
        coverage run --source flash -m pytest flash tests \
          --reruns 3 --reruns-delay 2 -v \
          --junitxml=junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      if: failure()

    - name: Statistics
      if: success()
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
