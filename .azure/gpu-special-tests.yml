# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "master"
      - "refs/tags/*"
pr:
  - "master"

jobs:
  - job: special
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "45"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: lit-rtx-3090
    variables:
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )

    container:
      image: "pytorchlightning/pytorch_lightning:base-cuda-py3.9-torch1.12-cuda11.6.1"
      options: "--ipc=host --gpus=all"

    workspace:
      clean: all

    steps:

    - bash: echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
      displayName: 'set visible devices'

    - bash: |
        echo $CUDA_VISIBLE_DEVICES
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        python --version
        pip --version
        pip list
        df -kh /dev/shm
      displayName: 'Image info & NVIDIA'

    - bash: |
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'GPU: {mgpu}'"
      displayName: 'Sanity check'

    - bash: |
        # python -m pip install "pip==20.1"
        pip install '.[image]' learn2learn
        pip install '.[test]' --upgrade-strategy only-if-needed
        pip list
      displayName: 'Install dependencies'

    - bash: |
        bash tests/special_tests.sh
      displayName: 'Testing: special'

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m coverage html
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
        ls -l
      displayName: 'Statistics'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      inputs:
        testResultsFiles: '$(Build.StagingDirectory)/test-results.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: 'coverage.xml'
        reportDirectory: '$(Build.SourcesDirectory)/htmlcov'
        testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
      condition: succeededOrFailed()
